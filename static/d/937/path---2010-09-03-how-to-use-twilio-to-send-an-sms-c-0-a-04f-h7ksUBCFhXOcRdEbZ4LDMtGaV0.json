{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"98a2e587-54ff-5275-88b5-6b1ddd31d328","excerpt":"your Twilio authentication credentials ACCOUNT SID = ‘xxx’ # these are on your account page\nACCOUNT TOKEN = ‘xxx’ version of the Twilio REST API to use API…","html":"<div><div><div><div><div>\n<p>I wrote about <a href=\"./1279646643000.jpg\">liking Twilio's UI</a> not too long ago. Unfortunately the actual usability of their API isn't quite as sharp.</p>\n<div>Signing up was straightforward enough, but beyond that things got incredibly murky. All I want is to be able to send an SMS from my app; I don't really care about anything else. </div>\n<p></p>\n<div>The examples provided for ruby don't detail this, but fortunately I stumbled around long enough to figure it out.</div>\n<p></p>\n<div>First, you need to <a href=\"https://www.twilio.com/user/account/phone-numbers/\">register the phone number</a> you will be sending the SMSes to (this limitation is only for the developer trial period, I believe). Under \"My Outgoing CallerID Numbers\" section click the \"Add Caller ID\" button. This will prompt you for a phone number. Enter yours, and it will present you with a PIN and call the number entered. Pick up the call when it rings and enter the PIN when prompted.</div>\n<p></p>\n<div>Next grab the helper library <a href=\"http://www.twilio.com/docs/libraries/\">over here</a>. I did this in Ruby, so just extract the zip and get 'twiliolib.rb' from the 'lib' folder. For a simple test I wrote the following script:</div>\n<div>\n  <div><pre>require 'twiliolib.rb'\n<h1>your Twilio authentication credentials</h1>\n<p>ACCOUNT<em>SID = ‘xxx’ # these are on your account page\nACCOUNT</em>TOKEN = ‘xxx’</p>\n<h1>version of the Twilio REST API to use</h1>\n<p>API_VERSION = ‘2010-04-01’</p>\n<p>account = Twilio::RestAccount.new(ACCOUNT<em>SID, ACCOUNT</em>TOKEN)</p>\n<p>d = {\n‘From’ => ‘415-599-2671’,\n‘To’ => ‘480-555-1234’, # this is the number you registered\n‘Body’ => ‘This is an SMS Test’,\n}</p>\n<p>resp = account.request(”/#{API<em>VERSION}/Accounts/#{ACCOUNT</em>SID}/SMS/Messages”,\n‘POST’, d)\n<br>\nresp.error! unless resp.kind_of? Net::HTTPSuccess\nputs “code: %s\\nbody: %s” % [resp.code, resp.body]</pre></div></p>\n</div>\n<div>The key here is that the 'From' number is the Sandbox Phone Number listed on your account dashboard, and the 'To' number is the one you registered up above. <strong>Any other numbers will not work</strong>. Don't forget to put in your ACCOUNT_SID and ACCOUNT_TOKEN too, those are also on the dashboard.</div>\n<p></p>\n<div>Fire up your console and run the script. If you see a bunch of XML and a 'code: 201' returned, you should be receiving and SMS shortly. If you see a '400 \"Bad Request\" (Net::HTTPServerException)' error, then double check that the From and To numbers are right.</div>\n<p></p>\n<div>This information is buried and I was very close to just throwing my hands up and looking elsewhere. If you are writing an application, these details are critical.</div>\n</div></div></div></div></div>","frontmatter":{"title":"How to Use Twilio to Send an SMS","date":"September 03, 2010"}}},"pageContext":{"slug":"/2010/09/03/how-to-use-twilio-to-send-an-sms/","previous":{"fields":{"slug":"/2010/08/27/macbook-pro-likes-dislikes/"},"frontmatter":{"title":"MacBook Pro Likes & Dislikes"}},"next":{"fields":{"slug":"/2010/09/03/yeah-this-is-what-i-wanted-to-see-at-espncom/index.html/"},"frontmatter":{"title":"Yeah this is what I wanted to see at espn.com"}}}}