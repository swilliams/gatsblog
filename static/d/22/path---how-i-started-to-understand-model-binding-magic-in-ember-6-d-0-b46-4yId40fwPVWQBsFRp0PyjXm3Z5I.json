{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"62d35dde-4606-5471-b8d2-7a9a3f4e0244","excerpt":"I’m learning  Ember.js  in efforts to stay  reasonably up to date  with client side web technologies.  This hasn’t been the easiest going. Ember’s best feature…","html":"<p>I’m learning <a href=\"http://emberjs.com/\">Ember.js</a> in efforts to stay <a href=\"http://blog.swilliams.me/words/2014/01/20/keep-your-developer-saw-sharp/\">reasonably up to date</a> with client side web technologies. <a href=\"http://blog.swilliams.me/words/2014/05/06/oh-cool-you-want-to-be-a-web-developer/\">This hasn’t been the easiest going.</a></p>\n<p>Ember’s best feature is that it easily binds values in HTML to their corresponding properties on objects. I’ve found the implementations of this a little confusing sometimes. Going through the Getting Started guide has been helpful, though <a href=\"http://emberjs.com/guides/getting-started/displaying-the-number-of-incomplete-todos/\">this part tripped</a> me up for a good hour, specifically this snippet: </p>\n<div class=\"gatsby-highlight\" data-language=\"js within todos_controller.js\"><pre class=\"language-js within todos_controller.js\"><code class=\"language-js within todos_controller.js\">remaining: function() {\n  return this.filterBy(&#39;isCompleted&#39;, false).get(&#39;length&#39;);\n}.property(&#39;@each.isCompleted&#39;),</code></pre></div>\n<p>That last line turns the associatied method into a <a href=\"http://emberjs.com/guides/object-model/computed-properties/\">computed property</a>.  My understanding of computed properties was as a means to provide a simple call to complex data (eg. a <code class=\"language-text\">fullName</code> property that joins <code class=\"language-text\">firstName</code> and <code class=\"language-text\">lastName</code> properties). This particular method is on a <em>controller</em>, has a previously foreign syntax (<code class=\"language-text\">@each</code>), and the template that refers to it still uses it’s canonical name (<code class=\"language-text\">remaining</code>).</p>\n<figure>\n\t<img src=\"/images/assets/ember/zoidberg.gif\" alt=\"Wha?\">\n</figure>\n<p>In order to understand just what was happening, I pumped the brakes and dug into the sample application. My first question was why they were using a computed property altogether. I whipped up another method and added it to my controller:</p>\n<div class=\"gatsby-highlight\" data-language=\"js todos_controller.js\"><pre class=\"language-js todos_controller.js\"><code class=\"language-js todos_controller.js\">remaining: function() {\n  return this.filterBy(&#39;isCompleted&#39;, false).get(&#39;length&#39;);\n}.property(&#39;@each.isCompleted&#39;),\n\nderp: function() {\n  return &#39;derp!&#39;;\n}</code></pre></div>\n<p>{% raw %}</p>\n<div class=\"gatsby-highlight\" data-language=\"html index.html\"><pre class=\"language-html index.html\"><code class=\"language-html index.html\">&lt;h1&gt;todos {{derp}}&lt;/h1&gt;</code></pre></div>\n<p>{% endraw %}</p>\n<p>This resulted in the method body being substituted in the template, which reminded me that {% raw %}<code class=\"language-text\">{{derp}}</code>{% endraw %} was just printing out whatever <code class=\"language-text\">derp</code> evaluated to, in this case a function.<sup>1</sup> So I made <code class=\"language-text\">derp</code> a computed property:</p>\n<div class=\"gatsby-highlight\" data-language=\"js todos_controller.js\"><pre class=\"language-js todos_controller.js\"><code class=\"language-js todos_controller.js\">derp: function() {\n  return &#39;derp!&#39;;\n}.property(&#39;what&#39;)</code></pre></div>\n<p>This worked. My <code class=\"language-text\">&lt;h1&gt;</code> was now ‘todos derp!‘. In fact, you could simplify it even more by doing this: <code class=\"language-text\">property()</code> and leaving off a name altogether. It also demonstrated that the first argument to <code class=\"language-text\">property</code> didn’t have a bearing on what goes in the Template. Next step was to substitute my static text with something useful.</p>\n<div class=\"gatsby-highlight\" data-language=\"js todos_controller.js\"><pre class=\"language-js todos_controller.js\"><code class=\"language-js todos_controller.js\">derp: function() {\n  return this.filterBy(&#39;isCompleted&#39;, false).get(&#39;length&#39;);\n}.property()</code></pre></div>\n<p>And sure enough, the title was now ‘todos 2’. I suspected this would work because my controller extended <code class=\"language-text\">Ember.ArrayController</code>, giving it access to <code class=\"language-text\">filterBy</code>. This lead me back to one of my original questions: what is the purpose of <code class=\"language-text\">&#39;@each.isCompleted&#39;</code>?</p>\n<p>I played around with the todo app a little more and noticed that my {% raw %}<code class=\"language-text\">{{derp}}</code>{% endraw %} was not automatically updating when todos where checked off while the original {% raw %}<code class=\"language-text\">{{remaining}}</code>{% endraw %} was. Then it hit me: <code class=\"language-text\">&#39;@each&#39;</code> must be a special directive for an <code class=\"language-text\">ArrayController</code> that bound that function to the <code class=\"language-text\">isCompleted</code> property of <a href=\"http://emberjs.com/api/classes/Ember.ArrayController.html#property__each\"><em>each</em></a> object in its array. Putting a <code class=\"language-text\">console.log(&#39;called&#39;);</code> confirmed this suspicion — it’s called every time <code class=\"language-text\">isCompleted</code> is accessed.</p>\n<p>After this bit of forensics, things make a little more sense now. I do wish this association was a little more spelled out in the documentation though for us thick-headed developers.</p>\n<div class=\"footnotes\">\n1. This is what JavaScript does. Open the dev tools and log a function without executing it — the body of that function prints out.\n</div>","frontmatter":{"title":"How I Started to Understand Model Binding Magic in Ember","date":"May 12, 2014"}}},"pageContext":{"slug":"/how-i-started-to-understand-model-binding-magic-in-ember/","previous":{"fields":{"slug":"/what-is-app-dot-net/"},"frontmatter":{"title":"What is App.net?"}},"next":{"fields":{"slug":"/fujifilm-x100s/"},"frontmatter":{"title":"Fujifilm X100s"}}}}