{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"bea333a3-7119-5d4e-9e6f-771599294800","excerpt":"Functional programming has always been a bit of a mindbender for me. I’ve read plenty of tutorials on the subject, but it wasn’t until recently that it finally…","html":"<p>Functional programming has always been a bit of a mindbender for me. I’ve read plenty of tutorials on the subject, but it wasn’t until recently that it finally started to click for me.</p>\n<p>The basics of partial function application involves something like this.</p>\n<pre class=\"source-code\"><span>var</span> <span>slice</span> = <span>Array</span>.<span>prototype</span>.<span>slice</span>; <span>// just to simplify things</span><br><span>var</span> <span>partial</span> = <span>function</span>(<span>fn</span>) {<br><span>var</span> <span>args</span> = <span>slice</span>.<span>call</span>(<span>arguments</span>, <span>1</span>);<br><span>return</span> <span>function</span>() {<br><span>return</span> <span>fn</span>.<span>apply</span>(<span>this</span>, <span>args</span>.<span>concat</span>(<span>slice</span>.<span>call</span>(<span>arguments</span>)));<br>  };<br>};</pre></div></div></div></div>\n<p>Bwah?</p>\n<p>What this does is take a function as a parameter. It then takes all the other parameters and hangs on to them. It returns another function, that when called, executes that first one, with the original arguments <em>and</em> any new ones you pass in.</p>\n<p>Bwah?</p>\n<p>Let’s use a primitive example to try to unwind this thing.</p>\n<pre class=\"source-code\"><span>var</span> <span>add</span> = <span>function</span>(<span>a</span>, <span>b</span>) {<br><span>return</span> <span>a</span> + <span>b</span>;<br>};<br><br><span>var</span> <span>add5to</span> = <span>partial</span>(<span>add</span>, <span>5</span>);</pre>\n<p>Now when you call <code>add5to(3)</code> you’ll get 8. Yes, this will always add 5 to whatever you supply to it. Yes, it is absolutely useless.</p>\n<p>This is where a lot of tutorials stop, leaving you to think “OMG WHO CARES?!” and then get back to doing important things, like stamp collecting.</p>\n<p>And that’s where I stopped for the longest time too. But then when I watched <a href=\"http://vimeo.com/43382919\">this video</a> a light came on to realize that this could be <em>useful</em>. You can use it to build a pretty nice DSL that creates nested DOM elements.</p>\n<p>Let’s say you have a function called <code>el</code> that takes  <code>tagName</code>, <code>attributes</code>, and <code>content</code> as parameters.</p>\n<pre class=\"source-code\"><span>var</span> <span>el</span> = <span>function</span>(<span>tagName</span>, <span>attributes</span>, <span>content</span>) {<br><span>// snip</span><br>};<br><span>var</span> <span>element</span> = <span>el</span>(<span>“div</span><span>”</span>, {<span>className</span>: <span>‘foo</span><span>’</span>, <span>id</span>: <span>‘bar</span><span>’</span>}, <span>“Hi</span> <span>I</span><span>’m</span> <span>a</span> <span>div</span>!<span>”</span>);<br><span>// results in:</span><br><span>// &lt;div id=“bar” class=“foo”&gt;Hi I’m a div!&lt;/div&gt;</span></pre>\n<p>Let’s also say that if you leave out <code>attributes</code>, it treats the second parameter as <code>content</code>.</p>\n<pre class=\"source-code\">    <span>el</span>(<span>“p</span><span>”</span>, <span>“Call</span> <span>me</span> <span>Ishmael</span>.<span>”</span>);<br><span>// &lt;p&gt;Call me Ishamel.&lt;/p&gt;</span></pre>\n<p>That in itself is a little useful, but here’s where partial function application comes in. Cram <code>el</code> into <code>partial</code> and stuff starts to get real.</p>\n<pre class=\"source-code\"><span>var</span> <span>div</span> = <span>partial</span>(<span>el</span>, <span>“div</span><span>”</span>);<br><span>var</span> <span>element</span> = <span>div</span>({<span>className</span>: <span>‘foo</span><span>’</span>, <span>id</span>: <span>‘bar</span><span>’</span>}, <span>“Hi</span> <span>I</span><span>’m</span> <span>a</span> <span>div</span>!<span>”</span>)</pre>\n<p>In fact, we can quickly make functions for many HTML tags.</p>\n<pre class=\"source-code\"><span>var</span> <span>DOM</span> = {};<br>[<span>“div</span><span>”</span>, <span>“p</span><span>”</span>, <span>“ul</span><span>”</span>, <span>“ol</span><span>”</span>, <span>“li</span><span>”</span>].<span>forEach</span>(<span>function</span>(<span>t</span>) {<br><span>DOM</span>[<span>t</span>] = <span>partial</span>(<span>el</span>, <span>t</span>);<br>});</pre>\n<p>Now you can string a bunch of stuff together.</p>\n<pre class=\"source-code\"><span>var</span> <span>list</span> = <span>DOM</span>.<span>ul</span>(<br>            [<span>DOM</span>.<span>li</span>(<span>“one</span><span>”</span>), <br><span>DOM</span>.<span>li</span>(<span>“two</span><span>”</span>), <br><span>DOM</span>.<span>li</span>(<span>“three</span><span>”</span>)]);</pre>\n<p>Theeeeen, take into account something like <code>map</code> and you can really start to make some magic.</p>\n<pre class=\"source-code\"><span>var</span> <span>people</span> = [{<span>name</span>: <span>“Scott</span><span>”</span>}, {<span>name</span>: <span>“Bob</span><span>”</span>}, {<span>name</span>: <span>“Barry</span><span>”</span>}];<br><span>var</span> <span>names</span> = <span>people</span>.<span>map</span>(<span>function</span>(<span>p</span>) {<span>return</span> <span>DOM</span>.<span>li</span>(<span>p</span>.<span>name</span>); });<br><span>var</span> <span>list</span> = <span>DOM</span>.<span>ul</span>(<span>names</span>);</pre>\n<p>All of a sudden you have a quick list of DOM elements with names of people in them. You can refactor that out some more, but I wanted to just focus on just the <code>partial</code> bit of this.</p>\n<p>When would be a good time to use this? When you have a bunch of functions that act similarly but vary slightly on parameters.</p>\n<p>The power of this lies in that you can take an incredibly simple function, and then use it to build complex mechanisms out of it. I’m still nowhere near an expert on this, but I think this time the wrinkles in my brain may just sink in.</p>","frontmatter":{"title":"How I Finally Understood Functional Programming With JavaScript","date":"May 06, 2013"}}},"pageContext":{"slug":"/2013/05/06/how-i-finally-understood-functional-programming-with-javascript/","previous":{"fields":{"slug":"/2013/04/20/in-which-i-purchased-a-new-car/"},"frontmatter":{"title":"In Which I Purchased a New Car"}},"next":{"fields":{"slug":"/2013/05/14/fear-of-falling-fear-of-failing-fear-of-rejection/"},"frontmatter":{"title":"Fear of Falling, Fear of Failing, Fear of Rejection"}}}}