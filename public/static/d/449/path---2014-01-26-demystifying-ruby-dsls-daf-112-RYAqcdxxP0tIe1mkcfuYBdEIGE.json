{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"80ee2914-18d7-5fbc-bb87-661e92075a2f","excerpt":"I like  Ruby . It has a way of appearing clean and simple, while still being expressive. Due to its  typing system  you can bend it in a variety of ways to do…","html":"<p>I like <a href=\"https://www.ruby-lang.org/en/\">Ruby</a>. It has a way of appearing clean and simple, while still being expressive. Due to its <a href=\"http://en.wikipedia.org/wiki/Dynamic_typing#Dynamic_type-checking_and_runtime_type_information\">typing system</a> you can bend it in a variety of ways to do certain things that would be very complicated in other languages, or make you write an entire compiler. I’m talking, of course, about Domain Specific Languages, or <a href=\"http://en.m.wikipedia.org/wiki/Domain_specific_language\">DSLs</a>. If you’ve ever used a popular Ruby library (like Rails, or RSpec, or anything else) then you’ve used a DSL. Rails in particular has a couple different ones:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> <span class=\"token comment\"># Routes</span>\n <span class=\"token comment\"># config/routes.rb</span>\n <span class=\"token constant\">DerptyDerp</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Application</span><span class=\"token punctuation\">.</span>routes<span class=\"token punctuation\">.</span>draw <span class=\"token keyword\">do</span>\n   resources <span class=\"token symbol\">:users</span>\n   resources <span class=\"token symbol\">:dinguses</span><span class=\"token punctuation\">,</span> only<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token symbol\">:new</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:show</span><span class=\"token punctuation\">]</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\"># ActiveRecord</span>\n <span class=\"token comment\"># app/models/user.rb</span>\n <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">ActiveRecord</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Base</span>\n   validates <span class=\"token symbol\">:email</span><span class=\"token punctuation\">,</span> presence<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span><span class=\"token punctuation\">,</span> uniqueness<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span>\n   has_one <span class=\"token symbol\">:dingus</span><span class=\"token punctuation\">,</span> dependent<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:destroy</span>\n <span class=\"token keyword\">end</span></code></pre></div>\n<p>And so on. At first glance, the code that allows this can be intimidating, especially when it’s been broken up and refactored across 20 different classes and modules. Fortunately, there are probably only about 10 things that you really need to know to read along, and to make them yourself.</p>\n<h3>Class Methods</h3>\n<p>Did you know that you can execute code right from within a class declaration? Well, you can. Try it!</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Derp</span>\n  <span class=\"token keyword\">def</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>can_eat_sandwiches\n    puts <span class=\"token string\">\"I LOVE CATS\"</span>\n  <span class=\"token keyword\">end</span>\n  \n  can_eat_sandwiches\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>When that class is read by the interpreter, it’ll execute the <code class=\"language-text\">can_eat_sandwiches</code> method and print the non-sequitur to the console. This’ll even work through inheritance.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Herp</span> <span class=\"token operator\">&lt;</span> <span class=\"token constant\">Derp</span>\n  can_eat_sandwiches\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>And you’ll have a wonderful message printed out twice. This technique can be used to do more than just clutter up a log file too! For example, in Rails when you <a href=\"https://github.com/rails/rails/blob/9c025ab6e9731dde56186b41ba5d4f216a48c831/activemodel/lib/active_model/validations.rb#L140\">setup validation</a>, all you’re doing is calling another method.</p>\n<h3>Put it into a Module</h3>\n<p>Sometimes you want to add functionality to a class without locking it into a long inheritance chain. Ruby uses <a href=\"http://www.tutorialspoint.com/ruby/ruby_modules.htm\">Modules</a> to accomplish this, so you can pull your methods into a separate file to include them at will. There’s a catch though before you dive in. Traditionally, you’d include a module like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">TheHerppening</span>\n  <span class=\"token keyword\">def</span> can_eat_sandwiches\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Sandwichable</span>\n  include <span class=\"token constant\">TheHerppening</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>If you know how modules work, you might’ve noticed that will only add <code class=\"language-text\">can_eat_sandwiches</code> to <em>instances</em> of <code class=\"language-text\">Sandwichable</code>, not to <code class=\"language-text\">Sandwichable</code> itself. Which means that calling <code class=\"language-text\">can_eat_sandwiches</code> directly in the class won’t work. But fear not! Ruby can be molded in many dark and fearsome ways. Rather than using <code class=\"language-text\">include</code>, you can use <code class=\"language-text\">extend</code> to add methods to a class.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sandwichable</span>\n  extend <span class=\"token constant\">TheHerppening</span>\n  \n  can_eat_sandwiches\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Aaaaand we’re back in business. But, say you wanted to have some methods that needed to be on instances, and some for the class? Can you mix both? Sure. Just wrap them in different modules and add them with the appropriate calls. There’s even a pattern to follow for naming the modules: <code class=\"language-text\">ClassMethods</code> and <code class=\"language-text\">InstanceMethods</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">TheHerppening</span>\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">def</span> can_eat_sandwiches\n      puts <span class=\"token string\">'DING'</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n  \n  <span class=\"token keyword\">module</span> <span class=\"token constant\">InstanceMethods</span>\n    <span class=\"token keyword\">def</span> eat_the_sandwich\n      puts <span class=\"token string\">'I wish I could marry a sandwich.'</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>They can even be in the same file. As a side note, this is also how you can do namespacing in Ruby. Including these can be a little tedious if you have to add this to lots of classes. </p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sandwichable</span>\n    extend <span class=\"token constant\">TheHerppening</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ClassMethods</span>\n    include <span class=\"token constant\">TheHerppening</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">InstanceMethods</span>\n  \n    can_eat_sandwiches\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Not to mention ugly. And if there’s one thing a good Ruby coder can’t stand, it’s ugly code. Let’s fix that.</p>\n<p><a href=\"http://ruby-doc.org/core-2.1.0/Module.html\">Modules</a> (and classes) have all kinds of meta-programming capabilities built in. I encourage you to go and peruse them at your leisure. What we’ll focus on here is the <code class=\"language-text\">[included](http://ruby-doc.org/core-2.1.0/Module.html#method-i-included)</code> method. </p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Dingus</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">included</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n      base<span class=\"token punctuation\">.</span>send <span class=\"token symbol\">:include</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Dingus</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">InstanceMethods</span>\n      base<span class=\"token punctuation\">.</span>extend <span class=\"token constant\">Dingus</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>All of a sudden, your class now has all of the extra stuff from the <code class=\"language-text\">Dingus</code> module inside it.</p>\n<p>That might be jumping ahead a few steps, what with the <code class=\"language-text\">class &lt;&lt; self</code> and all. Don’t forget that in Ruby, <em>everything</em> is a class, even modules. Conceptually it might be easier to understand if you look at <code class=\"language-text\">Module</code>’s ancestors: </p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token operator\">></span> <span class=\"token builtin\">Module</span><span class=\"token punctuation\">.</span>ancestors\n<span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">Module</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">PP</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ObjectMixin</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Kernel</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">BasicObject</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>So, a <code class=\"language-text\">Module</code> is just a subclass of <code class=\"language-text\">Object</code> and can be treated as such. <a href=\"http://www.youtube.com/watch?v=WFNEgdwjEhs\">Whoa</a>. Specifically, the <code class=\"language-text\">class &lt;&lt; self</code> allows you to put class level methods on the module (you can also do this to a class as an alternative to <code class=\"language-text\">def self.whatevers</code>).</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Dingus</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> say_hi\n      puts <span class=\"token string\">'HI'</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token constant\">Dingus</span><span class=\"token punctuation\">.</span>say_hi <span class=\"token comment\"># HI</span></code></pre></div>\n<p>And, <code class=\"language-text\">included</code> is called when that module is included in a class. This means you can set off a chain reaction of includes with just a single one.</p>\n<p>This is just the start. Ruby gives you enough metaprogramming rope to build a hammock and then hang yourself with the leftovers. We’ll get into some of the other ways to do this later on, including <a href=\"http://stackoverflow.com/q/4911353/736\">blocks</a>, <a href=\"http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval\">eval</a>, and the infamous <a href=\"http://www.ruby-doc.org/core-2.1.0/BasicObject.html#method-i-method_missing\">method-missing</a>. I encourage you to start digging into some code, and even trying a little of this yourself. Once you get a few reps in, understanding how DSLs work becomes much easier.</p>","frontmatter":{"title":"Demystifying Ruby DSLs","date":"January 26, 2014"}}},"pageContext":{"slug":"/2014/01/26/demystifying-ruby-dsls/","previous":{"fields":{"slug":"/2014/01/25/my-computers-through-the-ages-part-ii/"},"frontmatter":{"title":"My Computers Through the Ages Part II"}},"next":{"fields":{"slug":"/2014/02/21/demystifying-ruby-dsls-part-2/"},"frontmatter":{"title":"Demystifying Ruby DSLs — Part 2"}}}}