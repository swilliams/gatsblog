{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"8d595a89-f7e2-5c07-98aa-2d658c6227e8","excerpt":"When I decided to work on  my own thing  seriously, one of the first decisions I had to confront was “What should I write the darn thing in?” To cut to the…","html":"<p>When I decided to work on <a href=\"swilliams\">my own thing</a> seriously, one of the first decisions I had to confront was “What should I write the darn thing in?” To cut to the chase, I ended up going with <a href=\"http://rubyonrails.org/\">Ruby on Rails</a>, and here’s why.<p></p></p>\n<div>The natural decision was to go with .NET. I've been professionally employed writing .NET software for the last 7 years, and I'm pretty good at it. And, I don't <i>dislike</i> it either; it's a well documented environment, and has a pretty good ecosystem. I especially like <a href=\"http://asp.net/mvc\">ASP.NET MVC</a>, and heavily considered writing my app in it and storing everything in SQL Server, and using the Entity Framework to easily store and retrieve data. Price wasn't a factor in my decision either; Microsoft offers a pretty nice deal through the <a href=\"http://www.microsoft.com/bizspark/\">BizSpark program</a>.\n<p>There was one thing though. Like I said, I’ve been writing .NET code for a while, and I realized that if I didn’t do something different, I’d just get burned out from programming in the same environment over and over. I’m already advising and contributing to another extra-curricular project that will be using <a href=\"http://ASP.NET\">ASP.NET</a> MVC, and yet another .NET project would just be too much.</p>\n<p>What else was there then? I wrote my <a href=\"http://swilliamsphoto.com\">photo blog</a> in a Python framework called <a href=\"http://pylonshq.com\">Pylons</a>. I thought Pylons was alright, but the documentation left quite a bit to be desired. It was difficult to track down answers to questions, and just took too much time to really be productive.</p>\n<p>There’s also <a href=\"http://www.djangoproject.com/\">Django</a>, another popular Python framework. It has <i>fantastic</i> <a href=\"http://jacobian.org/writing/great-documentation/\">documentation</a>, and a vibrant community. There’s a lot of stuff to like about it, so why didn’t I go with it? It wasn’t that I found fault with Django itself, just that I liked what I saw with Rails more.</p>\n<p>Rails has been around since 2004, making it <i>incredibly</i> mature as far as web frameworks go. The documentation isn’t quite as good as Django’s, but still better than most things. The <a href=\"http://guides.rubyonrails.org/\">guides</a> are especially good. But, perhaps the killer feature of Rails is the plugin model and library. If you need some piece of functionality, someone has probably already thought about it and written a <a href=\"http://rubygems.org/\">gem</a> for it.</p>\n<p>From a productivity standpoint, I feel that even though I’ve only been using Rails for about 4 weeks, I’m <i>already</i> more adept at it than I am with Pylons, and I’ve used Pylons [off and on] for two years.</p>\n<p>Nothing is perfect, and there are certainly things I don’t like about Rails, but nothing I can’t deal with and work around. Right now my biggest problem is that I just don’t know what I don’t know! Some of the code I’ve written will surely make Ruby aficionados cringe and curse my name, and I have spent way too much time on a small part only to find that it was already built into the language or framework just waiting for me. These are the birthing pains though, eventually, I will be better at it.</p>\n<p>So, Rails it is. I’m not using a funky <a href=\"http://haml-lang.com/\">HTML</a> or <a href=\"http://sass-lang.com/\">CSS</a> generator yet (one thing at a time), but I might incorporate them some time down the line. I haven’t settled on a database yet either; one of the the nice things about Rails is that it’s <a href=\"http://guides.rubyonrails.org/migrations.html\">Migration</a> model allows you to change it very easily. I’ll probably go with MySQL, or perhaps Postgres (Oracle being responsible for MySQL fills me with dread, but haven’t used Postgres… ever).</p>","frontmatter":{"title":"A Start - The Framework","date":"July 02, 2010"}}},"pageContext":{"slug":"/2010/07/02/a-start-the-framework/","previous":{"fields":{"slug":"/2010/07/01/stock-photo/"},"frontmatter":{"title":"Stock Photo"}},"next":{"fields":{"slug":"/2010/07/03/lamest-super-power-ever/"},"frontmatter":{"title":"Lamest Super Power Ever"}}}}