{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"122104c9-23d0-5e2b-b230-be21e7a14b80","excerpt":"I’ve been noodling with an idea for a  watchOS 2  app. It involves  Connectivity  - transferring files from the Watch to its paired iOS device. The WWDC…","html":"<p>I’ve been noodling with an idea for a <a href=\"https://developer.apple.com/watchos/pre-release/\">watchOS 2</a> app. It involves <a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WatchConnectivity_framework/index.html#//apple_ref/doc/uid/TP40015269\">Connectivity</a> - transferring files from the Watch to its paired iOS device. The WWDC sessions are very good, but I ran into a couple of snags with the framework. I had <a href=\"https://twitter.com/swilliams/status/616671359557599232\">tweeted something that I thought was a bug</a>, but on closer inspection of the docs it actually wasn’t. I <a href=\"https://twitter.com/swilliams/status/616673013417803776\">tweeted another message stating as much</a>, but it hasn’t gotten the notice that the original did.<sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup> Anyways, here’s what I learned.</p>\n<p><em>[ed: This is with iOS 9, watchOS 2, and Xcode 7, all in beta 2. Stuff might change.]</em></p>\n<h2>You can run both simulators at once</h2>\n<p>But it’s not obvious. First, run the watchOS simulator. In the scheme control, it’s the ”[App Name] WatchKit App” scheme, which has both the iPhone and Apple Watch available (for example, “iPhone 6 + Apple Watch - 38mm”), and run it. </p>\n<figure class=\"center\">\n    <img alt=\"Xcode Scheme for iPhone6 and Watch\" src=\"/images/assets/conn-iphone-6-and-watch.png\">\n</figure>\n<p>When it’s running, change the scheme (without stopping the simulator) to the normal iPhone scheme. In this case ”[App Name] > iPhone 6”. </p>\n<figure class=\"center\">\n    <img alt=\"Xcode Scheme for iPhone6 and Watch\" src=\"/images/assets/conn-iphone-6.png\">\n</figure>\n<p>Now, run this scheme <em>without</em> compiling: hold down ⌘ and click the Run button. The iOS app will now be running in the simulator. Sometimes the watch app will close, but you can open it back up again.</p>\n<p>The console and breakpoints may get a little squirrelly, so you probably won’t be able to depend on them so well.</p>\n<h2>WCSessionDelegate</h2>\n<p>Connectivity has one main delegate to implement: <a href=\"https://developer.apple.com/library/prerelease/watchos/documentation/WatchConnectivity/Reference/WCSessionDelegate_protocol/\"><code class=\"language-text\">WCSessionDelegate</code></a>. This can be implemented on <em>both</em> the iOS and watchOS apps, and different behavior will happen. For example, when you transfer a file, the <strong>receiver</strong> will need to implement <code class=\"language-text\">session:didReceiveFile:</code>. If you want to receive some kind of notification that the file was sent the <strong>sender</strong> needs to implement <code class=\"language-text\">session:didFinishFileTransfer:error:</code>. </p>\n<p>This seemed counter-intuitive to me at first, but on further reflection, it makes sense. I do wish the docs more clearly illustrated this though.</p>\n<h2>You’re in the background</h2>\n<p>Don’t forget that your iOS app is <strong>not</strong> guaranteed to be running when these notifications come in. And they will come in on a background queue too, so don’t immediately try to update the UI without getting over to the main queue first.</p>\n<h2>Demo</h2>\n<p>I created a simple demo app to illustrate all of this. <a href=\"https://github.com/swilliams/watchkit-connectivity-demo\">It’s up on GitHub</a>. Take a look at the <code class=\"language-text\">AppDelegate</code> for the iOS app, the <code class=\"language-text\">ExtensionDelegate</code> and <code class=\"language-text\">InterfaceController</code> in the watchOS extension target. This demo was thrown together quickly without regard for best practices, blah blah blah.</p>\n<div class=\"footnotes\">\n  <ol>\n    <li class=\"footnote\" id=\"fn:1\">\n  <p>Such is the nature of Twitter, alas.</p>\n</li>\n  </ol>\n</div>","frontmatter":{"title":"WatchKit Connectivity and File Transfers","date":"July 02, 2015"}}},"pageContext":{"slug":"/2015/07/02/watchkit-connectivity-and-file-transfers/","previous":{"fields":{"slug":"/2015/06/30/basic-github-workflow-for-collaboration/"},"frontmatter":{"title":"Basic GitHub Workflow For Collaboration"}},"next":{"fields":{"slug":"/2015/07/24/great-moments-in-customer-service/"},"frontmatter":{"title":"Great Moments in Customer Service"}}}}