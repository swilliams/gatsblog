{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"8f66c2de-fc79-5fe0-89f2-3ed878a931ee","excerpt":"Last time we learned about how to use modules to dynamically add functionality to a class . This time let’s take a look at doing that, but customizing our…","html":"<p><a href=\"/words/2014/01/26/demystifying-ruby-dsls\">Last time we learned about how to use modules to dynamically add functionality to a class</a>. This time let’s take a look at doing that, but customizing our extensions at runtime. </p>\n<p>What helped me ultimately understand how these things work is that you are building up classes on the fly. It’s kind of like when you <code class=\"language-text\">include</code> a module, it’s editing that class to add more methods to it. Think of a bunch of Legos. Each Lego is a module with various methods on it. At runtime they assemble together to build a castle.</p>\n<figure>\n    <img alt=\"Lego Castle by InSapphoWeTrust on Flickr.\" src=\"/images/assets/lego-annotated.png\">\n    <figcaption><a href=\"http://www.flickr.com/photos/56619626@N05/7406185206/in/photolist-chsCQo-chsDcG-chsCVb-chsD97-chsBY3-chsCeN-chsDid-bgETZB-8FZGC9-9nsJ9P-8oTk1n-dCdMj4-f8b3QR-7J1LqD-7BnYDa-7BnZmZ-7BrJZw-7BrLsb-7BnVLP-9XN1mi-cnFar5-chsCy7-gC3qkX-chsCKW-chsCs1-chsCoN-aCZJqe-aCZJe4-chsCcf-chsC41-aCcgjW-aC9BwX-aCcgf3-aC9BE6-aC9BKr-aCcgUf-aCcgRw-aC9C9v-aCcgXo-chsC7J-chsBZw-a5YVbT-em9rGR-em9ru8-emfdMW-em9tEg-emfewq-emfeEm-emfdxf-emfeh9-emfdi5\">Lego Castle</a> by <a href=\"http://www.flickr.com/photos/skinnylawyer/\">InSapphoWeTrust</a> on Flickr.</figcaption>\n</figure>\n\t\t\t\n### Dynamically Adding\nWhat if those Legos could generate even more Legos as you were building with them, and then intelligently join themselves together?\n<p>If you’re familiar with Rails, you’ve seen that you can just declare associations within a model — <code class=\"language-text\">:has_many</code>, <code class=\"language-text\">:has_one</code>, and so on. Once you add those directives to your class, suddenly you have access to brand spanking new methods. Have you ever wondered how that worked? Let’s implement a rudimentary version.</p>\n<p>Think for a moment about <code class=\"language-text\">:has_many</code>. What would you expect the line <code class=\"language-text\">has_many :gerbils</code> methods to do?  You would have to have a <code class=\"language-text\">gerbils</code> method to retrieve the little fellas, and another one, <code class=\"language-text\">gerbils=(new_value)</code> to set them (and others to add them and so on, but <a href=\"http://en.wikipedia.org/wiki/Keep_it_simple_stupid\">KISS</a>). You implement that with a generic <code class=\"language-text\">get_child_models(child_name)</code> method, but that feels like the Java (™ Oracle Corporation) way… and I have too much self respect to go down that path. Instead we can take advantage of Ruby’s metaprogramming capabilities and generate them dynamically. </p>\n<p>One way to do this is with <code class=\"language-text\">eval</code>.</p>\n<h3>A Word on Eval</h3>\n<p>Ruby has a few versions of <code class=\"language-text\">eval</code>. They all take strings or blocks and turn them in code that is executed.</p>\n<ul>\n<li>There’s the <a href=\"http://www.ruby-doc.org/core-2.1.0/Kernel.html#method-i-eval\">standard one</a> that executes arbitrary code.</li>\n<li><a href=\"http://ruby-doc.org/core-2.1.0/Module.html#method-i-class_eval\">class_eval</a> — similar to vanilla <code class=\"language-text\">eval</code>, but executes the code in the context of the Class itself. There’s also <code class=\"language-text\">module_eval</code> which does the same thing (more or less). Example:</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Monkey</span>\n<span class=\"token keyword\">end</span>\n\nm <span class=\"token operator\">=</span> <span class=\"token constant\">Monkey</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n<span class=\"token class-name\">Monkey<span class=\"token punctuation\">.</span>class_eval</span> <span class=\"token operator\">%</span><span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> <span class=\"token function\">screech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'Eek Eek'</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span>screech <span class=\"token comment\"># Eek Eek</span></code></pre></div>\n<ul>\n<li><a href=\"\">instance_eval</a> — modifies a class, but from an instance point of view, <em>and only for that particular instance</em> (this is called a <a href=\"http://rubymonk.com/learning/books/4-ruby-primer-ascent/chapters/39-ruby-s-object-model/lessons/131-singleton-methods-and-metaclasses\">Singleton method</a>).</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Monkey</span>\n<span class=\"token keyword\">end</span>\n\nm <span class=\"token operator\">=</span> <span class=\"token constant\">Monkey</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n<span class=\"token class-name\">m2</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Monkey</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span>\n<span class=\"token class-name\">m<span class=\"token punctuation\">.</span>instance_eval</span> <span class=\"token operator\">%</span><span class=\"token function\">q</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">def</span> <span class=\"token function\">screech</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token string\">'Eek Eek'</span> <span class=\"token keyword\">end</span><span class=\"token punctuation\">)</span>\nm<span class=\"token punctuation\">.</span>screech <span class=\"token comment\"># Eek Eek</span>\nm2<span class=\"token punctuation\">.</span>screech <span class=\"token comment\"># NoMethodError: undefined method `screech' for #&lt;Monkey:0x007fa6f768bac8></span></code></pre></div>\n<p>Using these techniques you can generate the set of methods for our <code class=\"language-text\">:has_many</code> implementation.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">module</span> <span class=\"token constant\">Associations</span>\n  <span class=\"token keyword\">class</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">&lt;</span> <span class=\"token keyword\">self</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">included</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span>\n      base<span class=\"token punctuation\">.</span>extend <span class=\"token constant\">Associations</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">module</span> <span class=\"token constant\">ClassMethods</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">has_many</span><span class=\"token punctuation\">(</span>thingies<span class=\"token punctuation\">)</span>\n      code <span class=\"token operator\">=</span> <span class=\"token operator\">%</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">def</span> <span class=\"token comment\">#{thingies}</span>\n            <span class=\"token comment\"># retrieve stuff from here</span>\n        <span class=\"token keyword\">end</span>\n\n        <span class=\"token keyword\">def</span> <span class=\"token comment\">#{thingies}=(new_value)</span>\n            <span class=\"token comment\"># set new_value here</span>\n        <span class=\"token keyword\">end</span>\n      <span class=\"token punctuation\">)</span>\n      class_eval code\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>Now, if you <code class=\"language-text\">include Associations</code> in your class, you can call <code class=\"language-text\">has_many :hamsters</code> or <code class=\"language-text\">has_many :gerbils</code> or <code class=\"language-text\">has_many :guinea_pigs</code> and have all of your getters and setters created.</p>\n<figure>\n    <img alt=\"This is you with all the gerbil methods.\" src=\"/images/assets/cashew.jpg\">\n    <figcaption>This is you with all the gerbil methods.</figcaption>\n</figure>\n<h3>Caution</h3>\n<p>I’m not a big fan of <code class=\"language-text\">eval</code>, at least when using it with strings. The biggest reason is that it makes bugs harder to find. The Ruby interpreter will point out syntax errors when the file loads, but a typo in an evalled string won’t get caught until runtime. The longer the string, the more likely something bad will creep in there. And some of these dynamically created methods will be long. I’m talking <a href=\"http://www.amazon.com/gp/product/B0026L7H20/ref=as_li_ss_tl?ie=UTF8&#x26;camp=1789&#x26;creative=390957&#x26;creativeASIN=B0026L7H20&#x26;linkCode=as2&#x26;tag=thepetzoo-20\">Lord of the Rings Extended Edition</a> long.</p>\n<p>Fortunately there is a better way. The eval methods also take blocks, which work pretty well in most cases. For the purposes of dynamically generating methods, I prefer using <code class=\"language-text\">define_method</code> <a href=\"http://ruby-doc.org/core-2.1.0/Module.html#method-i-define_method\">source</a>. It’s available on <code class=\"language-text\">Module</code> (and therefore classes too) and, just like it says on the tin, is designed to create methods on the fly and add them to a class.</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> <span class=\"token function\">has_many</span><span class=\"token punctuation\">(</span>thingies<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">define_method</span> thingies<span class=\"token punctuation\">.</span>to_s <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># retrieve stuff from here</span>\n  <span class=\"token keyword\">end</span>\n\n  <span class=\"token keyword\">define_method</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>thingies<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># set new_value here</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>It’s kinda similar to the eval code, in fact, <code class=\"language-text\">define_method</code> passes itself along to <code class=\"language-text\">instance_eval</code>, so when all is said and done, it’s merely for our convenience. But is easier to test, and will complain loudly if there’s a syntax error. </p>\n<p>Working with actual code rather than a string makes refactoring easier too. Let’s say you want to enable your users to define their own implementations of the generated rodent methods. Pulling that out into its own method is simple:</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">def</span> add_method_without_clobbering <span class=\"token punctuation\">(</span>method_name<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>method_definition<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">unless</span> method_defined<span class=\"token operator\">?</span> method_name\n    <span class=\"token keyword\">define_method</span> method_name<span class=\"token punctuation\">,</span> method_definition\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">has_many</span><span class=\"token punctuation\">(</span>thingies<span class=\"token punctuation\">)</span>\n  add_method_without_clobbering thingies<span class=\"token punctuation\">.</span>to_s <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># retrieve stuff from here</span>\n  <span class=\"token keyword\">end</span>\n\n  add_method_without_clobbering <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter tag\">#{</span>thingies<span class=\"token delimiter tag\">}</span></span>=\"</span> <span class=\"token keyword\">do</span>\n    <span class=\"token comment\"># set new_value here</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>That’s still possible with string evals, but is easier to read in my eyes.</p>\n<p>That’ll wrap up this entry on DSLs. There’s only one other big piece of the pie I’d like to cover — blocks, but you can do a whole lot without them.</p>\n<p>One thing to keep in mind when writing DSLs is that it can be hard to follow along. Document everything, especially the esoteric parts. It might even be a good idea to diagram the path of all the <code class=\"language-text\">include</code> chain. DSLs can make client code easier to write, but usually at the expense of crazy complexity within the DSL itself.</p>","frontmatter":{"title":"Demystifying Ruby DSLs — Part 2","date":"February 21, 2014"}}},"pageContext":{"slug":"/2014/02/21/demystifying-ruby-dsls-part-2/","previous":{"fields":{"slug":"/2014/01/26/demystifying-ruby-dsls/"},"frontmatter":{"title":"Demystifying Ruby DSLs"}},"next":{"fields":{"slug":"/2014/03/05/migrating-from-squarespace/"},"frontmatter":{"title":"Migrating from Squarespace"}}}}