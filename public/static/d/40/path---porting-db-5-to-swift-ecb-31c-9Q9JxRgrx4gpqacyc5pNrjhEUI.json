{"data":{"site":{"siteMetadata":{"title":"A Blog","author":"Scott Williams"}},"markdownRemark":{"id":"6c41da2b-d35e-576f-b3c2-6b271a9c13a5","excerpt":"I’m a big fan of using the  DB5 library  for customizing an iOS app via a  plist configuration file , and I’ve used it in several projects so far. I’ve also…","html":"<p>I’m a big fan of using the <a href=\"https://github.com/quartermaster/DB5\">DB5 library</a> for customizing an iOS app via a <a href=\"http://en.wikipedia.org/wiki/Plist\">plist configuration file</a>, and I’ve used it in several projects so far. I’ve also  been digging more into Swift and iOS 8 and thought it would be a good exercise to familiarize myself more with Swift to port DB5 from its original Objective C codebase to Swift.</p>\n<p>The result is over on Github: <a href=\"https://github.com/swilliams/DB5-Swift\">DB5-Swift</a>.</p>\n<p>For grins, I wanted to go with a purely Swift approach, no NSWhatever classes unless there was no alternative. This meant using <code class=\"language-text\">Dictionary</code> instead of <code class=\"language-text\">NSDictionary</code>. Which turned into a bit of a headache. The biggest issue I ran into was that Swift’s Dictionary doesn’t seem to have an equivalent of NSDictionary’s <a href=\"https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSDictionary_Class/Reference/Reference.html#//apple_ref/doc/uid/20000140-CBHBABID\"><code class=\"language-text\">initWithContentsOfFile:</code></a><sup>1</sup>. Rather than try to parse the plist by hand, I just went back with good ole NSDictionary.</p>\n<p>Two of Swift’s headlining features are <a href=\"https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_468\">type inference</a> and <a href=\"https://developer.apple.com/library/prerelease/mac/documentation/Swift/Conceptual/Swift_Programming_Language/TheBasics.html#//apple_ref/doc/uid/TP40014097-CH5-XID_478\">optional values</a>. I’ve used both of these features before in C# for several years and have appreciated what they bring to the table. Swift is a little bit different though because it comes with the history of Objective C and Cocoa. NSDictionary was built to take advantage of Objective C’s type system, and using it with Swift involved more casting and ? and ! operators than I expected. It didn’t help that Xcode would often be wrong in its helper tooltips, suggesting addtional !‘s which wouldn’t fix the problem.</p>\n<p>I’m not entirely sure if DB5-Swift is 100% up to snuff right now. I think some of the methods should have better handling for nil values. I still have plenty of learning left before I’d consider myself adept at Swift. Overall, it was  a good exercise, and I will use it in future apps. </p>\n<div class=\"footnotes\">\n<p><small>\n1. Not necessarily true according to <a href=\"https://twitter.com/_lanceparker/status/499368493209239552\">@_lanceparker</a> on Twitter.\n</small></p>","frontmatter":{"title":"Porting DB5 to Swift","date":"August 12, 2014"}}},"pageContext":{"slug":"/porting-db5-to-swift/","previous":{"fields":{"slug":"/podcasts-i-listen-to-july-2014/"},"frontmatter":{"title":"Podcasts I Listen to (July 2014)"}},"next":{"fields":{"slug":"/performance-detractors/"},"frontmatter":{"title":"Performance Detractors"}}}}